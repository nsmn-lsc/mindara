services:
  - type: web
    name: mindara
    env: python
    plan: free
    healthCheckPath: /healthz
    buildCommand: |
      pip install --upgrade pip
      pip install -r requirements.txt
      python manage.py collectstatic --noinput
      echo "== Diagn√≥stico staticfiles =="
      python manage.py findstatic css/mindara.css -v2 || true
      python manage.py findstatic vendor/bootstrap/5.3.0/bootstrap.min.css -v2 || true
      ls -lah staticfiles/css || true
      ls -lah staticfiles/vendor/bootstrap/5.3.0 || true
      python - <<'EOF'
import os, json
targets = [
  'staticfiles/css/mindara.css',
  'staticfiles/vendor/bootstrap/5.3.0/bootstrap.min.css',
  'staticfiles/vendor/fontawesome/6.4.0/css/all.min.css'
]
print('STATIC DIAGNOSTIC JSON START')
print(json.dumps({t: os.path.exists(t) for t in targets}))
print('STATIC DIAGNOSTIC JSON END')
EOF
      python manage.py migrate --noinput
    startCommand: gunicorn core.wsgi:application --log-file - --timeout 120 --workers=3
    envVars:
      - key: DJANGO_SETTINGS_MODULE
        value: core.settings
      - key: PYTHONUNBUFFERED
        value: "1"
      - key: SECRET_KEY
        generateValue: true
      - key: DEBUG
        value: "False"
      - key: ALLOWED_HOSTS
        value: "mindara.onrender.com"
      - key: DB_ENGINE
        value: django.db.backends.postgresql
      - key: DB_NAME
        fromDatabase:
          name: mindara-db
          property: database
      - key: DB_USER
        fromDatabase:
          name: mindara-db
          property: user
      - key: DB_PASSWORD
        fromDatabase:
          name: mindara-db
          property: password
      - key: DB_HOST
        fromDatabase:
          name: mindara-db
          property: host
      - key: DB_PORT
        fromDatabase:
          name: mindara-db
          property: port
      - key: DISABLE_MANIFEST_STATIC
        value: "1"
      - key: FORCE_SIMPLE_STATIC
        value: "1"
    autoDeploy: true

databases:
  - name: mindara-db
    plan: free  # Starter es legacy; usar plan soportado (standard)
